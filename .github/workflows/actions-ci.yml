# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the workflow will run
on:
  # Triggers the workflow on push or pull request events but only for the "main" branch
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:


# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:

  prepare-environment:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
        uses: actions/checkout@v4

      - name: Load environment variables
        run: |
          echo "Loading .env file"
          export $(grep -v '^#' moodle/.env | xargs)
          
          echo "_MOODLE_USER=$_MOODLE_USER" >> $GITHUB_ENV
          echo "_MOODLE_PW=$_MOODLE_PW" >> $GITHUB_ENV
          
          echo "_USER_NAME=$_USER_NAME" >> $GITHUB_ENV
          echo _"USER_PASSWORD=$_USER_PASSWORD" >> $GITHUB_ENV
          echo "_USER_ROLE=$_USER_ROLE" >> $GITHUB_ENV
          
          echo "_DB_ROOT_PW=$_DB_ROOT_PW" >> $GITHUB_ENV
          echo "_DB_BACKEND_PW=$_DB_BACKEND_PW" >> $GITHUB_ENV
          echo "_DB_MOODLE_PW=$_DB_MOODLE_PW" >> $GITHUB_ENV
          
          echo "_DB_MOODLE_USER=$_DB_MOODLE_USER" >> $GITHUB_ENV
          echo "_DB_MOODLE_NAME=$_DB_MOODLE_NAME" >> $GITHUB_ENV

          echo "COMPOSE_PROJECT_NAME=$COMPOSE_PROJECT_NAME" >> $GITHUB_ENV


  # This workflow contains a single job called "build"
  build-and-test:
    needs: prepare-environment
    # if: false
    # The type of runner that the job will run on
    runs-on: ubuntu-latest 

    services:
      db_moodle:
        image: docker.io/bitnami/mariadb:10.6
        ports:
          - 3312:3306
        env:
          MARIADB_USER: ${{ env.DB_MOODLE_USER }}
          MARIADB_PASSWORD: ${{ env.DB_MOODLE_PW }}
          MARIADB_ROOT_PASSWORD: ${{ env.DB_ROOT_PW }}
          MARIADB_DATABASE: ${{ env.DB_MOODLE_NAME }}
          MARIADB_CHARACTER_SET: utf8mb4
          MARIADB_COLLATE: utf8mb4_unicode_ci

      phpmyadmin:
        image: phpmyadmin/phpmyadmin
        ports:
          - 8078:80
        env:
          PMA_HOSTS: db_moodle
          PMA_PORT: 3306
          PMA_USER: root
          PMA_PASSWORD: ${{ env.DB_ROOT_PW }}
          
    steps:  
      - name: Check Environment
        env:
          MOODLE_USER: ${{ env._MOODLE_USER
        run: |
          echo "MOODLE_USER"
          echo "$_MOODLE_USER"
          echo "MOODLE_PW"
          echo "$_MOODLE_PW"
          echo "USER_NAME"
          echo "$_USER_NAME"
          echo "USER_PASSWORD"
          echo "$_USER_PASSWORD"
          echo "USER_ROLE"
          echo "$_USER_ROLE"
          echo "DB_ROOT_PW"
          echo "$_DB_ROOT_PW"
          echo "DB_MOODLE_PW"
          echo "$_DB_MOODLE_PW"
          echo "DB_MOODLE_USER"
          echo "$_DB_MOODLE_USER"
          echo "DB_MOODLE_NAME"
          echo "$_DB_MOODLE_NAME"
          
      - name: Setup PHP
        uses: shivammathur/setup-php@v2
        with:
          php-version: '8.1'
          extensions: curl, zip, gd, dom, xml, mysqli, soap, xmlrpc, intl, xdebug, pgsql

      - name: Set up environment variables
        run: |
          echo "MOODLE_PARENT_DIRECTORY=$HOME" >> $GITHUB_ENV
          echo "WSL_USER=$USER" >> $GITHUB_ENV

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y apache2 php8.1 php8.1-curl php8.1-zip composer php8.1-gd php8.1-dom php8.1-xml php8.1-mysqli php8.1-soap php8.1-xmlrpc php8.1-intl php8.1-xdebug php8.1-pgsql libapache2-mod-php8.1 mariadb-client-10.6 default-jre zstd git jq
          sudo apt-get install -y git locales docker-ce-cli wget unzip default-jre zstd
          sudo locale-gen de_DE.UTF-8 en_AU.UTF-8

      - name: Set up locales
        run: |
          sudo sed -i 's/^# de_DE.UTF-8 UTF-8$/de_DE.UTF-8 UTF-8/' /etc/locale.gen
          sudo sed -i 's/^# en_AU.UTF-8 UTF-8$/en_AU.UTF-8 UTF-8/' /etc/locale.gen
          sudo locale-gen

      - name: Install Chrome and ChromeDriver
        run: |
          sudo apt-get remove -y --purge google-chrome-stable
          sudo apt-get autoremove -y
          wget -q -O - https://dl-ssl.google.com/linux/linux_signing_key.pub | sudo apt-key add -
          sudo sh -c 'echo "deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main" > /etc/apt/sources.list.d/google-chrome.list'
          sudo apt-get update
          wget -q "${CHROME_URL}" -O "/tmp/${CHROME_DEB}"
          sudo dpkg -i "/tmp/${CHROME_DEB}"
          sudo apt-mark hold google-chrome-stable
          echo "checkpoint1"
          sudo apt-get install -f -y
          echo "checkpoint2"
          wget -q --user-agent="Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/114.0.5735.90 Safari/537.36" "${CHROMEDRIVER_URL}" -O "/tmp/${CHROMEDRIVER_ZIP}"
          echo "checkpoint3"
          unzip -o "/tmp/${CHROMEDRIVER_ZIP}" -d /tmp
          echo "checkpoint4"
          sudo mv /tmp/chromedriver /usr/bin/chromedriver
          sudo chmod +x /usr/bin/chromedriver
          chromedriver --version
        env:
          CHROME_VERSION: "114.0.5735.90"
          CHROME_DEB: "google-chrome-stable_114.0.5735.90-1_amd64.deb"
          CHROME_URL: "https://mirror.cs.uchicago.edu/google-chrome/pool/main/g/google-chrome-stable/google-chrome-stable_114.0.5735.90-1_amd64.deb"
          CHROMEDRIVER_ZIP: "chromedriver_linux64.zip"
          CHROMEDRIVER_URL: "https://old.chromedriver.getwebdriver.com/114.0.5735.90/chromedriver_linux64.zip"

      - name: Prepare Moodle directory
        run: |
          getent passwd
          getent passwd 1000
          sudo mkdir -p $HOME/moodle
          sudo chown -R $USER:$USER $HOME/moodle
          
      - name: Download Moodle
        run: |
          cd $HOME
          chmod +x $GITHUB_WORKSPACE/moodle/download_adler_moodle.sh
          $GITHUB_WORKSPACE/moodle/download_adler_moodle.sh

      - name: Set up Moodle
        run: |
          cd $HOME/moodle
          cat $MOODLE_PARENT_DIRECTORY/moodle/admin/cli/install.php
          chmod +x $GITHUB_WORKSPACE/moodle/setup.sh
          $GITHUB_WORKSPACE/moodle/setup.sh --dbhost localhost
          
  autorentool:
    if: false
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Install dependencies
      run: |
        lscpu
        sudo apt-get update
        sudo apt-get install -y wget xvfb xdotool ffmpeg \
          libgtk-3-0 libnotify4 libgconf-2-4 libnss3 libxss1 libasound2 libgbm1 \
          libx11-xcb1 libxcb-dri3-0 libxcb-icccm4 libxcb-image0 libxcb-keysyms1 \
          libxcb-randr0 libxcb-render-util0 libxcb-shape0 libxcb-xfixes0 libxcb-xinerama0 libxcb-xkb1 \
          x11-utils libxkbcommon-x11-0

    - name: Download latest Autorentool release
      run: |
        LATEST_RELEASE=$(curl -s https://api.github.com/repos/ProjektAdLer/Autorentool/releases/latest)
        DOWNLOAD_URL=$(echo $LATEST_RELEASE | jq -r '.assets[] | select(.name | endswith("linux-unpacked.tar.gz")) | .browser_download_url')
        echo "$DOWNLOAD_URL"
        wget -q -O AuthoringTool.tar.gz $DOWNLOAD_URL
        tar -xvzf AuthoringTool.tar.gz
        #chmod +x AuthoringTool.AppImage

    - name: Fix some problems
      run: |
        sudo apt-get update
        
        export LIBGL_ALWAYS_SOFTWARE=1

        sudo apt-get install -y iproute2
        sudo ip addr add 127.0.0.1 dev lo

        sudo apt-get install -y libxtst6 xdg-utils libatspi2.0-0 libsecret-1-0 
        
        export ELECTRON_DISABLE_SANDBOX=1

        export LIBGL_ALWAYS_SOFTWARE=1


    - name: Start and check Xvfb
      run: |
        Xvfb :99 -screen 0 1920x1080x24 &
        echo "Waiting for Xvfb to be ready..."
        for attempt in $(seq 1 30); do
          if xdpyinfo -display :99 >/dev/null 2>&1; then
            echo "Xvfb is ready after $attempt attempt(s)"
            break
          fi
          sleep 0.5
        done
        xdpyinfo -display :99
        echo "Xvfb is ready"
        echo "DISPLAY=:99" >> $GITHUB_ENV
        
        
    - name: Start screen and recording
      run: |
        ffmpeg -f x11grab -video_size 1920x1080 -i :99 -codec:v libx264 -r 30 -v verbose screen_recording.mp4 &
        echo $! > ffmpeg_pid.txt
        sleep 2
    
    - name: Run Autorentool
      run: |
        max_attempts=5
        for attempt in $(seq 1 $max_attempts); do
          echo "Attempt $attempt of $max_attempts to start Authoring Tool"
          ./linux-unpacked/authoring-tool &
          tool_pid=$!
          sleep 10
          if curl -s http://localhost:8001 > /dev/null; then
            echo "Authoring Tool started successfully on attempt $attempt"
            break
          else
            echo "Attempt $attempt failed"
        
            if [ $attempt -eq $max_attempts ]; then
              echo "All $max_attempts attempts failed. Aborting pipeline."
              exit 1
            else
              echo "Killing process and retrying..."
              kill $tool_pid
              sleep 5  # Wait for process to be fully terminated
            fi
          fi
        done

        # Check if the tool is actually running
        if ! ps -p $tool_pid > /dev/null; then
          echo "Authoring Tool process is not running. Aborting pipeline."
          exit 1
        fi
        echo "Authoring Tool is running with PID $tool_pid"
        

    - name: Simulate interactions
      run: |
        echo "DISPLAY is set to $DISPLAY"
        ps aux | grep Xvfb
        ps aux | grep authoring
        ls -l /tmp/.X11-unix/

        DISPLAY=:99 xwininfo -root -tree
        echo "---"
        
        window_id=$(DISPLAY=:99 xdotool search --name "Autorentool v2.1.7" | head -n 1)
        if [ -n "$window_id" ]; then
          echo "Window found with ID: $window_id"
          DISPLAY=:99 xdotool windowfocus $window_id
          echo "Window focused"
        else
          echo "AuthoringTool window not found"
          exit 1
        fi
        sleep 1
        DISPLAY=:99 xdotool getmouselocation
        xdotool getmouselocation
        DISPLAY=:99 xdotool mousemove_relative 10 15 
        sleep 1
        DISPLAY=:99 xdotool mousemove 900 300 click 1 sleep 2 
        DISPLAY=:99 xdotool type "testWorld"
        DISPLAY=:99 xdotool sleep 1 key "Return"
        sleep 2

    - name: Stop screen recording
      if: always()
      run: |
        sleep 2
        kill $(cat ffmpeg_pid.txt)
        sleep 10  # Give ffmpeg time to finish writing

    - name: Upload screen recording
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: screen-recording
        path: screen_recording.mp4

    - name: Check Authoring Tool logs
      if: always()
      run: |
        cat /home/runner/.config/authoring-tool/logs/main.log || echo "Log file not found"

    - name: Check for errors
      if: always()
      run: |
        if [ -f ./error.log ]; then
          cat ./error.log
          exit 1
        fi
